import _extends from 'babel-runtime/helpers/extends';
import React from 'react';
import createClass from 'create-react-class';
import { View, StyleSheet } from 'react-native';
import Picker from './Picker';
import MultiPickerMixin from './MultiPickerMixin';
var styles = StyleSheet.create({
    item: {
        flex: 1
    },
    root: {
        flexDirection: 'row',
        alignItems: 'center',
        paddingTop: 10,
        paddingBottom: 10
    }
});
var MultiPicker = createClass({
    mixins: [MultiPickerMixin],
    render: function render() {
        var _this = this;

        var props = this.props;
        var disabled = props.disabled,
            pickerItemStyle = props.pickerItemStyle,
            pure = props.pure,
            children = props.children,
            style = props.style;

        var selectedValue = this.getValue();
        var colElements = children.map(function (col, i) {
            return React.createElement(
                View,
                { key: col.key || i, style: styles.item },
                React.createElement(Picker, _extends({ itemStyle: pickerItemStyle, disabled: disabled, pure: pure, selectedValue: selectedValue[i], onValueChange: function onValueChange() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        return _this.onValueChange.apply(_this, [i].concat(args));
                    } }, col.props))
            );
        });
        return React.createElement(
            View,
            { style: [styles.root, style] },
            colElements
        );
    }
});
export default MultiPicker;