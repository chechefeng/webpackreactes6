import _defineProperty from 'babel-runtime/helpers/defineProperty';
import React from 'react';
import createClass from 'create-react-class';
import classNames from 'classnames';
import ZScroller from 'zscroller';
import PickerMixin from './PickerMixin';
import isChildrenEqual from './isChildrenEqual';
var Picker = createClass({
    mixins: [PickerMixin],
    getDefaultProps: function getDefaultProps() {
        return {
            prefixCls: 'rmc-picker',
            pure: true
        };
    },
    getInitialState: function getInitialState() {
        var selectedValueState = void 0;
        var _props = this.props,
            selectedValue = _props.selectedValue,
            defaultSelectedValue = _props.defaultSelectedValue,
            children = _props.children;

        if (selectedValue !== undefined) {
            selectedValueState = selectedValue;
        } else if (defaultSelectedValue !== undefined) {
            selectedValueState = defaultSelectedValue;
        } else if (children && children.length) {
            selectedValueState = children[0].value;
        }
        return {
            selectedValue: selectedValueState
        };
    },
    componentDidMount: function componentDidMount() {
        // https://github.com/react-component/m-picker/issues/18
        this.itemHeight = this.refs.indicator.getBoundingClientRect().height;
        // compact
        this.refs.content.style.padding = this.itemHeight * 3 + 'px 0';
        this.zscroller = new ZScroller(this.refs.content, {
            scrollingX: false,
            snapping: true,
            locking: false,
            penetrationDeceleration: .1,
            minVelocityToKeepDecelerating: 0.5,
            scrollingComplete: this.scrollingComplete
        });
        this.zscroller.setDisabled(this.props.disabled);
        this.zscroller.scroller.setSnapSize(0, this.itemHeight);
        this.select(this.state.selectedValue);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('selectedValue' in nextProps) {
            this.setState({
                selectedValue: nextProps.selectedValue
            });
        }
        this.zscroller.setDisabled(nextProps.disabled);
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.selectedValue !== nextState.selectedValue || !isChildrenEqual(this.props.children, nextProps.children, this.props.pure);
    },
    componentDidUpdate: function componentDidUpdate() {
        this.zscroller.reflow();
        this.select(this.state.selectedValue);
    },
    componentWillUnmount: function componentWillUnmount() {
        this.zscroller.destroy();
    },
    scrollTo: function scrollTo(top) {
        this.zscroller.scroller.scrollTo(0, top);
    },
    fireValueChange: function fireValueChange(selectedValue) {
        if (selectedValue !== this.state.selectedValue) {
            if (!('selectedValue' in this.props)) {
                this.setState({
                    selectedValue: selectedValue
                });
            }
            if (this.props.onValueChange) {
                this.props.onValueChange(selectedValue);
            }
        }
    },
    scrollingComplete: function scrollingComplete() {
        var _zscroller$scroller$g = this.zscroller.scroller.getValues(),
            top = _zscroller$scroller$g.top;

        if (top >= 0) {
            this.doScrollingComplete(top);
        }
    },
    getChildMember: function getChildMember(child, m) {
        return child[m];
    },
    getValue: function getValue() {
        return this.props.selectedValue || this.props.children && this.props.children[0] && this.props.children[0].value;
    },
    toChildrenArray: function toChildrenArray(children) {
        // when use preactï¼Œwhen the children is [] will change to undeined
        return children || [];
    },
    render: function render() {
        var _pickerCls;

        var _props2 = this.props,
            children = _props2.children,
            prefixCls = _props2.prefixCls,
            className = _props2.className,
            itemStyle = _props2.itemStyle,
            indicatorStyle = _props2.indicatorStyle;
        var selectedValue = this.state.selectedValue;

        var itemClassName = prefixCls + '-item';
        var selectedItemClassName = itemClassName + ' ' + prefixCls + '-item-selected';
        var items = this.toChildrenArray(children).map(function (item) {
            return React.createElement(
                'div',
                { style: itemStyle, className: selectedValue === item.value ? selectedItemClassName : itemClassName, key: item.value },
                item.label
            );
        });
        var pickerCls = (_pickerCls = {}, _defineProperty(_pickerCls, className, !!className), _defineProperty(_pickerCls, prefixCls, true), _pickerCls);
        return React.createElement(
            'div',
            { className: classNames(pickerCls) },
            React.createElement('div', { className: prefixCls + '-mask' }),
            React.createElement('div', { className: prefixCls + '-indicator', ref: 'indicator', style: indicatorStyle }),
            React.createElement(
                'div',
                { className: prefixCls + '-content', ref: 'content' },
                items
            )
        );
    }
});
export default Picker;