import _extends from 'babel-runtime/helpers/extends';
import React from 'react';
import classnames from 'classnames';
import createClass from 'create-react-class';
import Picker from './Picker';
import MultiPickerMixin from './MultiPickerMixin';
var MultiPicker = createClass({
    mixins: [MultiPickerMixin],
    render: function render() {
        var _this = this;

        var _props = this.props,
            prefixCls = _props.prefixCls,
            pickerPrefixCls = _props.pickerPrefixCls,
            className = _props.className,
            rootNativeProps = _props.rootNativeProps,
            disabled = _props.disabled,
            pickerItemStyle = _props.pickerItemStyle,
            indicatorStyle = _props.indicatorStyle,
            pure = _props.pure,
            children = _props.children;

        var selectedValue = this.getValue();
        var colElements = children.map(function (col, i) {
            return React.createElement(
                'div',
                { key: col.key || i, className: prefixCls + '-item' },
                React.createElement(Picker, _extends({ itemStyle: pickerItemStyle, disabled: disabled, pure: pure, indicatorStyle: indicatorStyle, prefixCls: pickerPrefixCls, selectedValue: selectedValue[i], onValueChange: function onValueChange() {
                        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }

                        return _this.onValueChange.apply(_this, [i].concat(args));
                    } }, col.props))
            );
        });
        return React.createElement(
            'div',
            _extends({}, rootNativeProps, { className: classnames(className, prefixCls) }),
            colElements
        );
    }
});
export default MultiPicker;