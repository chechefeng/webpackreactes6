'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _rcHammerjs = require('rc-hammerjs');

var _rcHammerjs2 = _interopRequireDefault(_rcHammerjs);

var _object = require('object.omit');

var _object2 = _interopRequireDefault(_object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};

var Swipeout = function (_React$Component) {
    (0, _inherits3['default'])(Swipeout, _React$Component);

    function Swipeout(props) {
        (0, _classCallCheck3['default'])(this, Swipeout);

        var _this = (0, _possibleConstructorReturn3['default'])(this, (Swipeout.__proto__ || Object.getPrototypeOf(Swipeout)).call(this, props));

        _this.onPanStart = _this.onPanStart.bind(_this);
        _this.onPan = _this.onPan.bind(_this);
        _this.onPanEnd = _this.onPanEnd.bind(_this);
        _this.onCloseSwipe = _this.onCloseSwipe.bind(_this);
        _this.openedLeft = false;
        _this.openedRight = false;
        return _this;
    }

    (0, _createClass3['default'])(Swipeout, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                _props$left = _props.left,
                left = _props$left === undefined ? [] : _props$left,
                _props$right = _props.right,
                right = _props$right === undefined ? [] : _props$right;

            var width = this.content.offsetWidth;
            if (this.cover) {
                this.cover.style.width = width + 'px';
            }
            this.contentWidth = width;
            this.btnsLeftWidth = width / 5 * left.length;
            this.btnsRightWidth = width / 5 * right.length;
            document.body.addEventListener('touchstart', this.onCloseSwipe, true);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            document.body.removeEventListener('touchstart', this.onCloseSwipe, true);
        }
    }, {
        key: 'onCloseSwipe',
        value: function onCloseSwipe(ev) {
            var _this2 = this;

            if (this.openedLeft || this.openedRight) {
                var pNode = function (node) {
                    while (node.parentNode && node.parentNode !== document.body) {
                        if (node.className.indexOf(_this2.props.prefixCls + '-actions') > -1) {
                            return node;
                        }
                        node = node.parentNode;
                    }
                }(ev.target);
                if (!pNode) {
                    ev.preventDefault();
                    this.close();
                }
            }
        }
    }, {
        key: 'onPanStart',
        value: function onPanStart(e) {
            if (this.props.disabled) {
                return;
            }
            this.panStartX = e.deltaX;
        }
    }, {
        key: 'onPan',
        value: function onPan(e) {
            if (this.props.disabled) {
                return;
            }
            var _props2 = this.props,
                _props2$left = _props2.left,
                left = _props2$left === undefined ? [] : _props2$left,
                _props2$right = _props2.right,
                right = _props2$right === undefined ? [] : _props2$right;

            var posX = e.deltaX - this.panStartX;
            if (posX < 0 && right.length) {
                this._setStyle(Math.min(posX, 0));
            } else if (posX > 0 && left.length) {
                this._setStyle(Math.max(posX, 0));
            }
        }
    }, {
        key: 'onPanEnd',
        value: function onPanEnd(e) {
            if (this.props.disabled) {
                return;
            }
            var _props3 = this.props,
                _props3$left = _props3.left,
                left = _props3$left === undefined ? [] : _props3$left,
                _props3$right = _props3.right,
                right = _props3$right === undefined ? [] : _props3$right;

            var posX = e.deltaX - this.panStartX;
            var contentWidth = this.contentWidth;
            var btnsLeftWidth = this.btnsLeftWidth;
            var btnsRightWidth = this.btnsRightWidth;
            var openX = contentWidth * 0.33;
            var openLeft = posX > openX || posX > btnsLeftWidth / 2;
            var openRight = posX < -openX || posX < -btnsRightWidth / 2;
            if (openRight && posX < 0 && right.length) {
                this.open(-btnsRightWidth, false, true);
            } else if (openLeft && posX > 0 && left.length) {
                this.open(btnsLeftWidth, true, false);
            } else {
                this.close();
            }
        }
        // left & right button click

    }, {
        key: 'onBtnClick',
        value: function onBtnClick(ev, btn) {
            var onPress = btn.onPress;
            if (onPress) {
                onPress(ev);
            }
            if (this.props.autoClose) {
                this.close();
            }
        }
    }, {
        key: '_getContentEasing',
        value: function _getContentEasing(value, limit) {
            // limit content style left when value > actions width
            if (value < 0 && value < limit) {
                return limit - Math.pow(limit - value, 0.85);
            } else if (value > 0 && value > limit) {
                return limit + Math.pow(value - limit, 0.85);
            }
            return value;
        }
        // set content & actions style

    }, {
        key: '_setStyle',
        value: function _setStyle(value) {
            var _props4 = this.props,
                _props4$left = _props4.left,
                left = _props4$left === undefined ? [] : _props4$left,
                _props4$right = _props4.right,
                right = _props4$right === undefined ? [] : _props4$right;

            var limit = value > 0 ? this.btnsLeftWidth : -this.btnsRightWidth;
            var contentLeft = this._getContentEasing(value, limit);
            this.content.style.left = contentLeft + 'px';
            if (this.cover) {
                this.cover.style.display = Math.abs(value) > 0 ? 'block' : 'none';
                this.cover.style.left = contentLeft + 'px';
            }
            if (left.length) {
                var leftWidth = Math.max(Math.min(value, Math.abs(limit)), 0);
                this.left.style.width = leftWidth + 'px';
            }
            if (right.length) {
                var rightWidth = Math.max(Math.min(-value, Math.abs(limit)), 0);
                this.right.style.width = rightWidth + 'px';
            }
        }
    }, {
        key: 'open',
        value: function open(value, openedLeft, openedRight) {
            if (!this.openedLeft && !this.openedRight && this.props.onOpen) {
                this.props.onOpen();
            }
            this.openedLeft = openedLeft;
            this.openedRight = openedRight;
            this._setStyle(value);
        }
    }, {
        key: 'close',
        value: function close() {
            if ((this.openedLeft || this.openedRight) && this.props.onClose) {
                this.props.onClose();
            }
            this._setStyle(0);
            this.openedLeft = false;
            this.openedRight = false;
        }
    }, {
        key: 'renderButtons',
        value: function renderButtons(buttons, _ref) {
            var _this3 = this;

            var prefixCls = this.props.prefixCls;
            return buttons && buttons.length ? _react2['default'].createElement(
                'div',
                { className: prefixCls + '-actions ' + prefixCls + '-actions-' + _ref, ref: function ref(el) {
                        return _this3[_ref] = _reactDom2['default'].findDOMNode(el);
                    } },
                buttons.map(function (btn, i) {
                    return _react2['default'].createElement(
                        'div',
                        { key: i, className: prefixCls + '-btn ' + (btn.hasOwnProperty('className') ? btn.className : ''), style: btn.style, role: 'button', onClick: function onClick(e) {
                                return _this3.onBtnClick(e, btn);
                            } },
                        _react2['default'].createElement(
                            'div',
                            { className: prefixCls + '-text' },
                            btn.text || 'Click'
                        )
                    );
                })
            ) : null;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            var _a = this.props,
                prefixCls = _a.prefixCls,
                _a$left = _a.left,
                left = _a$left === undefined ? [] : _a$left,
                _a$right = _a.right,
                right = _a$right === undefined ? [] : _a$right,
                children = _a.children,
                restProps = __rest(_a, ["prefixCls", "left", "right", "children"]);
            var divProps = (0, _object2['default'])(restProps, ['disabled', 'autoClose', 'onOpen', 'onClose']);
            var refProps = {
                ref: function ref(el) {
                    return _this4.content = _reactDom2['default'].findDOMNode(el);
                }
            };
            return left.length || right.length ? _react2['default'].createElement(
                'div',
                (0, _extends3['default'])({ className: '' + prefixCls }, divProps),
                _react2['default'].createElement('div', { className: prefixCls + '-cover', ref: function ref(el) {
                        return _this4.cover = _reactDom2['default'].findDOMNode(el);
                    } }),
                this.renderButtons(left, 'left'),
                this.renderButtons(right, 'right'),
                _react2['default'].createElement(
                    _rcHammerjs2['default'],
                    (0, _extends3['default'])({ direction: 'DIRECTION_HORIZONTAL', onPanStart: this.onPanStart, onPan: this.onPan, onPanEnd: this.onPanEnd }, refProps),
                    _react2['default'].createElement(
                        'div',
                        { className: prefixCls + '-content' },
                        children
                    )
                )
            ) : _react2['default'].createElement(
                'div',
                (0, _extends3['default'])({}, refProps, divProps),
                children
            );
        }
    }]);
    return Swipeout;
}(_react2['default'].Component);

Swipeout.defaultProps = {
    prefixCls: 'rc-swipeout',
    autoClose: false,
    disabled: false,
    left: [],
    right: [],
    onOpen: function onOpen() {},
    onClose: function onClose() {}
};
exports['default'] = Swipeout;
module.exports = exports['default'];